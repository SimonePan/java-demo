基础
1. 继承
2. 抽象
3. 封装
4. 多态

设计原则:
1. 封装变化。
2. 针对接口编程，而非实现。
3. 多用组合，少用继承。
4. 为了交互对象之间的松耦合设计而努力。--> 弹性的OO系统，能够应对变化，把对象间的依赖降到最低。
5. 对扩展开放，对修改关闭。--> 在不修改现有代码的情况下，扩展类，扩展新特性。
6. 依赖抽象，而不依赖具体类。




# 策略模式
策略模式定义了算法族，分别封装起来，让他们之间可以相互转换，此模式让算法的变化独立于使用算法的客户。

# 观察者模式
观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。
- 有状态的对象1：N观察对象。数据属于主题对象，观察者在数据变化时更新。
- 松耦合：
    - 主题无需知道观察者有哪些，做了什么。只知道观察者实现了某个接口（Observer接口）。
    - 加入/移除新的观察者，无需改动主题。
    - 主题只发送通知给所有实现了观察者接口的对象。

# 装饰者模式
装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。
- 装饰者该做的事就是增加行为到被包装对象上。当需要窥视装饰者链中的每一个装饰者时，这超出他们的职责。

# 工厂模式
- 工厂方法模式通过让子类决定该创建的对象是什么，来达到将对象创建的过程封装的目的。
    - 创建者类：抽象创建者类 -- 具体子类创建产品
    - 产品类
- 工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
- 抽象工厂模式提供一个接口，用户创建相关或依赖对象的家族，而不需要明确指定具体类。

# 单例模式
- 单例模式确保了一个类只有一个实例，并提供一个全部访问点。

# 命令模式
-






