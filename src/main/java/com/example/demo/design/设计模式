设计原则:
1. 封装变化。
2. 针对接口编程，而非实现。
3. 多用组合，少用继承。
4. 为了交互对象之间的松耦合设计而努力。--> 弹性的OO系统，能够应对变化，把对象间的依赖降到最低。


# 策略模式
策略模式定义了算法族，分别封装起来，让他们之间可以相互转换，此模式让算法的变化独立于使用算法的客户。

# 观察者模式
观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。
- 有状态的对象1：N观察对象。数据属于主题对象，观察者在数据变化时更新。
- 松耦合：
    - 主题无需知道观察者有哪些，做了什么。只知道观察者实现了某个接口（Observer接口）。
    - 加入/移除新的观察者，无需改动主题。
    - 主题只发送通知给所有实现了观察者接口的对象。






