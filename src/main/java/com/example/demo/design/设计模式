基础
1. 继承
2. 抽象
3. 封装
4. 多态

设计原则:
1. 封装变化。
2. 针对接口编程，而非实现。
3. 多用组合，少用继承。
4. 为了交互对象之间的松耦合设计而努力。--> 弹性的OO系统，能够应对变化，把对象间的依赖降到最低。
5. 对扩展开放，对修改关闭。--> 在不修改现有代码的情况下，扩展类，扩展新特性。
6. 依赖抽象，而不依赖具体类。
7. 最少知识原则：只和你的密友谈话。
8. 好莱坞原则：别调用（打电话给）我们，我们会调用（打电话给）你。




# 策略模式
策略模式定义了算法族，分别封装起来，让他们之间可以相互转换，此模式让算法的变化独立于使用算法的客户。

# 观察者模式
观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。
- 有状态的对象1：N观察对象。数据属于主题对象，观察者在数据变化时更新。
- 松耦合：
    - 主题无需知道观察者有哪些，做了什么。只知道观察者实现了某个接口（Observer接口）。
    - 加入/移除新的观察者，无需改动主题。
    - 主题只发送通知给所有实现了观察者接口的对象。

# 装饰者模式
装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。
- 装饰者该做的事就是增加行为到被包装对象上。当需要窥视装饰者链中的每一个装饰者时，这超出他们的职责。

# 工厂模式
- 工厂方法模式通过让子类决定该创建的对象是什么，来达到将对象创建的过程封装的目的。
    - 创建者类：抽象创建者类 -- 具体子类创建产品
    - 产品类
- 工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
- 抽象工厂模式提供一个接口，用户创建相关或依赖对象的家族，而不需要明确指定具体类。

# 单例模式
- 单例模式确保了一个类只有一个实例，并提供一个全部访问点。

# 命令模式
- 命令模式可将"动作的请求者"从"动作的执行者"对象中解耦。
- 命令模式将"请求"封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。
- 应用：日程安排（Scheduler）、线程池、工作队列等。
- 工作队列：你在某一端添加命令，另一端则是线程。线程从队列中取出一个命令，调用它的execute()方法，等待这个调用完成，然后将命令对象丢弃，再取下一个命令。
    - 工作队列类和进行计算的对象直接完全是解耦的。队列不关心命令是什么，执行的是什么。

# 适配器模式
- 适配器模式将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。

# 外观模式
- 外观模式提供了一个统一的接口，用来访问子系统中的一群接口。外观定义类一个高层接口，让子系统更容易使用。

* 适配器将一个对象包装起来以改变其接口；装饰者将一个对象包装起来以增加新的行为和责任；而外观将一群对象"包装"起来以简化其接口。

# 模板方法模式
- 模板方法模式在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模版方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。








